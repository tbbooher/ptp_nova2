/*! responsive-nav.js 1.0.23
 * https://github.com/viljamis/responsive-nav.js
 * http://responsive-nav.com
 *
 * Copyright (c) 2013 @viljamis
 * Available under the MIT license
 */
!function() {
    "use strict";
    /* exported responsiveNav */
    var e = function(e, t) {
        var n = !!window.getComputedStyle;
        // getComputedStyle polyfill
        n || (window.getComputedStyle = function(e) {
            return this.el = e, this.getPropertyValue = function(t) {
                var n = /(\-([a-z]){1})/g;
                return "float" === t && (t = "styleFloat"), n.test(t) && (t = t.replace(n, function() {
                    return arguments[2].toUpperCase();
                })), e.currentStyle[t] ? e.currentStyle[t] :null;
            }, this;
        });
        /* exported addEvent, removeEvent, getChildren, setAttributes, addClass, removeClass */
        // fn arg can be an object or a function, thanks to handleEvent
        // read more at: http://www.thecssninja.com/javascript/handleevent
        var o, i, s, r, a, c = function(e, t, n, o) {
            if ("addEventListener" in e) // BBOS6 doesn't support handleEvent, catch and polyfill
            try {
                e.addEventListener(t, n, o);
            } catch (i) {
                if ("object" != typeof n || !n.handleEvent) throw i;
                e.addEventListener(t, function(e) {
                    // Bind fn as this and set first arg as event object
                    n.handleEvent.call(n, e);
                }, o);
            } else "attachEvent" in e && (// check if the callback is an object and contains handleEvent
            "object" == typeof n && n.handleEvent ? e.attachEvent("on" + t, function() {
                // Bind fn as this
                n.handleEvent.call(n);
            }) :e.attachEvent("on" + t, n));
        }, l = function(e, t, n, o) {
            if ("removeEventListener" in e) try {
                e.removeEventListener(t, n, o);
            } catch (i) {
                if ("object" != typeof n || !n.handleEvent) throw i;
                e.removeEventListener(t, function(e) {
                    n.handleEvent.call(n, e);
                }, o);
            } else "detachEvent" in e && ("object" == typeof n && n.handleEvent ? e.detachEvent("on" + t, function() {
                n.handleEvent.call(n);
            }) :e.detachEvent("on" + t, n));
        }, h = function(e) {
            if (e.children.length < 1) throw new Error("The Nav container has no containing elements");
            // Loop through children and store in array if child != TextNode
            for (var t = [], n = 0; n < e.children.length; n++) 1 === e.children[n].nodeType && t.push(e.children[n]);
            return t;
        }, u = function(e, t) {
            for (var n in t) e.setAttribute(n, t[n]);
        }, d = function(e, t) {
            0 !== e.className.indexOf(t) && (e.className += " " + t, e.className = e.className.replace(/(^\s*)|(\s*$)/g, ""));
        }, p = function(e, t) {
            var n = new RegExp("(\\s|^)" + t + "(\\s|$)");
            e.className = e.className.replace(n, " ").replace(/(^\s*)|(\s*$)/g, "");
        }, v = document.createElement("style"), f = function(e, t) {
            var n;
            // Default options
            this.options = {
                animate:!0,
                // Boolean: Use CSS3 transitions, true or false
                transition:250,
                // Integer: Speed of the transition, in milliseconds
                label:"Menu",
                // String: Label for the navigation toggle
                insert:"after",
                // String: Insert the toggle before or after the navigation
                customToggle:"",
                // Selector: Specify the ID of a custom toggle
                openPos:"relative",
                // String: Position of the opened nav, relative or static
                jsClass:"js",
                // String: 'JS enabled' class which is added to <html> el
                init:function() {},
                // Function: Init callback
                open:function() {},
                // Function: Open callback
                close:function() {}
            };
            // User defined options
            for (n in t) this.options[n] = t[n];
            if (// Adds "js" class for <html>
            d(document.documentElement, this.options.jsClass), // Wrapper
            this.wrapperEl = e.replace("#", ""), document.getElementById(this.wrapperEl)) this.wrapper = document.getElementById(this.wrapperEl); else {
                if (!document.querySelector(this.wrapperEl)) // If el doesn't exists, stop here.
                throw new Error("The nav element you are trying to select doesn't exist");
                this.wrapper = document.querySelector(this.wrapperEl);
            }
            // Inner wrapper
            this.wrapper.inner = h(this.wrapper), // For minification
            i = this.options, o = this.wrapper, // Init
            this._init(this);
        };
        return f.prototype = {
            // Public methods
            destroy:function() {
                this._removeStyles(), p(o, "closed"), p(o, "opened"), p(o, "nav-collapse"), o.removeAttribute("style"), 
                o.removeAttribute("aria-hidden"), o = null, l(window, "resize", this, !1), l(document.body, "touchmove", this, !1), 
                l(s, "touchstart", this, !1), l(s, "touchend", this, !1), l(s, "mouseup", this, !1), 
                l(s, "keyup", this, !1), l(s, "click", this, !1), i.customToggle ? s.removeAttribute("aria-hidden") :s.parentNode.removeChild(s);
            },
            toggle:function() {
                r === !0 && (a ? (p(o, "opened"), d(o, "closed"), u(o, {
                    "aria-hidden":"true"
                }), i.animate ? (r = !1, setTimeout(function() {
                    o.style.position = "absolute", r = !0;
                }, i.transition + 10)) :o.style.position = "absolute", a = !1, i.close()) :(p(o, "closed"), 
                d(o, "opened"), o.style.position = i.openPos, u(o, {
                    "aria-hidden":"false"
                }), a = !0, i.open()));
            },
            resize:function() {
                "none" !== window.getComputedStyle(s, null).getPropertyValue("display") ? (u(s, {
                    "aria-hidden":"false"
                }), // If the navigation is hidden
                o.className.match(/(^|\s)closed(\s|$)/) && (u(o, {
                    "aria-hidden":"true"
                }), o.style.position = "absolute"), this._createStyles(), this._calcHeight()) :(u(s, {
                    "aria-hidden":"true"
                }), u(o, {
                    "aria-hidden":"false"
                }), o.style.position = i.openPos, this._removeStyles());
            },
            handleEvent:function(e) {
                var t = e || window.event;
                switch (t.type) {
                  case "touchstart":
                    this._onTouchStart(t);
                    break;

                  case "touchmove":
                    this._onTouchMove(t);
                    break;

                  case "touchend":
                  case "mouseup":
                    this._onTouchEnd(t);
                    break;

                  case "click":
                    this._preventDefault(t);
                    break;

                  case "keyup":
                    this._onKeyUp(t);
                    break;

                  case "resize":
                    this.resize(t);
                }
            },
            // Private methods
            _init:function() {
                d(o, "nav-collapse"), d(o, "closed"), r = !0, a = !1, this._createToggle(), this._transitions(), 
                this.resize();
                // IE8 hack
                var e = this;
                setTimeout(function() {
                    e.resize();
                }, 20), c(window, "resize", this, !1), c(document.body, "touchmove", this, !1), 
                c(s, "touchstart", this, !1), c(s, "touchend", this, !1), c(s, "mouseup", this, !1), 
                c(s, "keyup", this, !1), c(s, "click", this, !1), // Init callback
                i.init();
            },
            _createStyles:function() {
                v.parentNode || (v.type = "text/css", document.getElementsByTagName("head")[0].appendChild(v));
            },
            _removeStyles:function() {
                v.parentNode && v.parentNode.removeChild(v);
            },
            _createToggle:function() {
                if (i.customToggle) {
                    var e = i.customToggle.replace("#", "");
                    if (document.getElementById(e)) s = document.getElementById(e); else {
                        if (!document.querySelector(e)) throw new Error("The custom nav toggle you are trying to select doesn't exist");
                        s = document.querySelector(e);
                    }
                } else {
                    var t = document.createElement("a");
                    t.innerHTML = i.label, u(t, {
                        href:"#",
                        "class":"nav-toggle"
                    }), "after" === i.insert ? o.parentNode.insertBefore(t, o.nextSibling) :o.parentNode.insertBefore(t, o), 
                    s = t;
                }
            },
            _preventDefault:function(e) {
                e.preventDefault ? (e.preventDefault(), e.stopPropagation()) :e.returnValue = !1;
            },
            _onTouchStart:function(e) {
                e.stopPropagation(), this.startX = e.touches[0].clientX, this.startY = e.touches[0].clientY, 
                this.touchHasMoved = !1, l(s, "mouseup", this, !1);
            },
            _onTouchMove:function(e) {
                (Math.abs(e.touches[0].clientX - this.startX) > 10 || Math.abs(e.touches[0].clientY - this.startY) > 10) && (this.touchHasMoved = !0);
            },
            _onTouchEnd:function(e) {
                if (this._preventDefault(e), !this.touchHasMoved) {
                    if ("touchend" === e.type) {
                        this.toggle(e);
                        // Prevent click on the underlying menu on Android 2.3
                        var t = this;
                        return o.addEventListener("click", t._preventDefault, !0), setTimeout(function() {
                            o.removeEventListener("click", t._preventDefault, !0);
                        }, i.transition + 100), void 0;
                    }
                    var n = e || window.event;
                    // If it isn't a right click
                    3 !== n.which && 2 !== n.button && this.toggle(e);
                }
            },
            _onKeyUp:function(e) {
                var t = e || window.event;
                13 === t.keyCode && this.toggle(e);
            },
            _transitions:function() {
                if (i.animate) {
                    var e = o.style, t = "max-height " + i.transition + "ms";
                    e.WebkitTransition = t, e.MozTransition = t, e.OTransition = t, e.transition = t;
                }
            },
            _calcHeight:function() {
                for (var e = 0, t = 0; t < o.inner.length; t++) e += o.inner[t].offsetHeight;
                var n = ".nav-collapse.opened{max-height:" + e + "px}";
                v.styleSheet ? v.styleSheet.cssText = n :v.innerHTML = n, n = "";
            }
        }, new f(e, t);
    };
    window.responsiveNav = e;
}();